// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    
    /**
     *  | Ring where every nonzero element has a multiplicative inverse (possibly
     *  | a non-commutative field) so that ```a `mod` b = zero```
     */
    var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
        this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
        this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
    };
    
    /**
     *  | A commutative field
     */
    var Num = function (__superclass_Prelude$dotDivisionRing_0) {
        this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    
    /**
     *  | Addition and multiplication
     */
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = numMod;
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_12) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_22) {
        if (_22 instanceof LT) {
            return "LT";
        };
        if (_22 instanceof GT) {
            return "GT";
        };
        if (_22 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_13) {
        if (_13) {
            return "true";
        };
        if (!_13) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_29) {
        return function (_30) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    
    /**
     *  | An alias for `true`, which can be useful in guard clauses:
     *  |
     *  | E.g.
     *  |
     *  |     max x y | x >= y = x
     *  |             | otherwise = y
     */
    var otherwise = true;
    
    /**
     *  | Addition and multiplication
     */
    var one = function (dict) {
        return dict.one;
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_14) {
        return function (_15) {
            return 0;
        };
    });
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var mod = function (dict) {
        return dict.mod;
    };
    var liftM1 = function (__dict_Monad_7) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_7)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_18) {
        return function (_19) {
            return false;
        };
    }, function (_16) {
        return function (_17) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_23) {
        return function (_24) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_25) {
        return function (_26) {
            if (!_25 && !_26) {
                return EQ.value;
            };
            if (!_25 && _26) {
                return LT.value;
            };
            if (_25 && _26) {
                return EQ.value;
            };
            if (_25 && !_26) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var divisionRingNumber = new DivisionRing(function () {
        return moduloSemiringNumber;
    }, function () {
        return ringNumber;
    });
    var numNumber = new Num(function () {
        return divisionRingNumber;
    });
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_8) {
        return function (_9) {
            return _8;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _95 = compare(__dict_Ord_12)(a1)(a2);
                if (_95 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _96 = compare(__dict_Ord_13)(a1)(a2);
                if (_96 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _97 = compare(__dict_Ord_14)(a1)(a2);
                if (_97 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _98 = compare(__dict_Ord_15)(a1)(a2);
                if (_98 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_9) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_11) {
        return new Ord(function () {
            return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
        }, function (_27) {
            return function (_28) {
                if (_27.length === 0 && _28.length === 0) {
                    return EQ.value;
                };
                if (_27.length === 0) {
                    return LT.value;
                };
                if (_28.length === 0) {
                    return GT.value;
                };
                if (_27.length >= 1) {
                    var _105 = _27.slice(1);
                    if (_28.length >= 1) {
                        var _103 = _28.slice(1);
                        var _101 = compare(__dict_Ord_11)(_27[0])(_28[0]);
                        if (_101 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_11))(_105)(_103);
                        };
                        return _101;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_20) {
        return function (_21) {
            if (_20 instanceof LT && _21 instanceof LT) {
                return true;
            };
            if (_20 instanceof GT && _21 instanceof GT) {
                return true;
            };
            if (_20 instanceof EQ && _21 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    
    /**
     *  | This function returns its first argument, and can be used to assert type equalities.
     *  | This can be useful when types are otherwise ambiguous.
     *  |
     *  | E.g.
     *  |
     *  |     main = print $ [] `asTypeOf` [0]
     *  |
     *  | If instead, we had written `main = print []`, the type of the argument `[]` would have
     *  | been ambiguous, resulting in a compile-time error.
     */
    var asTypeOf = function (_10) {
        return function (_11) {
            return _10;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        DivisionRing: DivisionRing, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        zshr: zshr, 
        shr: shr, 
        shl: shl, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        ".&.": $dot$amp$dot, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "-": $minus, 
        mod: mod, 
        "/": $div, 
        one: one, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "#": $hash, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        asTypeOf: asTypeOf, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showUnit: showUnit, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        applicativeArr: applicativeArr, 
        bindArr: bindArr, 
        monadArr: monadArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        divisionRingNumber: divisionRingNumber, 
        numNumber: numNumber, 
        eqUnit: eqUnit, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqBoolean: eqBoolean, 
        eqArray: eqArray, 
        eqOrdering: eqOrdering, 
        showOrdering: showOrdering, 
        ordUnit: ordUnit, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordArray: ordArray, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupUnit: semigroupUnit, 
        semigroupString: semigroupString, 
        semigroupArr: semigroupArr
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;
    
    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;
    
    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;
    
    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;
    
    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;
    
    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;
    
    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;
    
    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;
    
    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;
    
    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;
    
    function runFn0(fn) {
      return fn();
    }
    ;
    
    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    
    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        runFn10: runFn10, 
        runFn9: runFn9, 
        runFn8: runFn8, 
        runFn7: runFn7, 
        runFn6: runFn6, 
        runFn5: runFn5, 
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2, 
        runFn1: runFn1, 
        runFn0: runFn0, 
        mkFn10: mkFn10, 
        mkFn9: mkFn9, 
        mkFn8: mkFn8, 
        mkFn7: mkFn7, 
        mkFn6: mkFn6, 
        mkFn5: mkFn5, 
        mkFn4: mkFn4, 
        mkFn3: mkFn3, 
        mkFn2: mkFn2, 
        mkFn1: mkFn1, 
        mkFn0: mkFn0, 
        on: on
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    
    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;
    
    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;
    
    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;
    
    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        foreachE: foreachE, 
        forE: forE, 
        whileE: whileE, 
        untilE: untilE, 
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function modifySTRef(ref) {
      return function(f) {
        return function() {
          return ref.value = f(ref.value);
        };
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    
    function runST(f) {
      return f;
    }
    ;
    var pureST = function (st) {
        return Control_Monad_Eff.runPure(runST(st));
    };
    return {
        pureST: pureST, 
        runST: runST, 
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    var print = function (__dict_Show_17) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_17)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_18) {
        return function (_36) {
            return function (_37) {
                if (_36) {
                    return _37;
                };
                if (!_36) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_19) {
        return function (_38) {
            return function (_39) {
                if (!_38) {
                    return _39;
                };
                if (_38) {
                    return Prelude["return"](__dict_Monad_19)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_20) {
        return function (_31) {
            return function (_32) {
                if (_31 === 0) {
                    return Prelude["return"](__dict_Monad_20)([  ]);
                };
                return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(_32)(function (_4) {
                    return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_20)(_31 - 1)(_32))(function (_3) {
                        return Prelude["return"](__dict_Monad_20)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_21) {
        return function (_33) {
            return function (_34) {
                return function (_35) {
                    if (_35.length === 0) {
                        return Prelude["return"](__dict_Monad_21)(_34);
                    };
                    if (_35.length >= 1) {
                        var _124 = _35.slice(1);
                        return Prelude[">>="](__dict_Monad_21["__superclass_Prelude.Bind_1"]())(_33(_34)(_35[0]))(function (a$prime) {
                            return foldM(__dict_Monad_21)(_33)(a$prime)(_124);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        unless: unless, 
        when: when, 
        foldM: foldM, 
        replicateM: replicateM
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Lazy = function (defer) {
        this.defer = defer;
    };
    var Lazy1 = function (defer1) {
        this.defer1 = defer1;
    };
    var Lazy2 = function (defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_22) {
        return function (f) {
            return defer2(__dict_Lazy2_22)(function (_42) {
                return f(fix2(__dict_Lazy2_22)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_23) {
        return function (f) {
            return defer1(__dict_Lazy1_23)(function (_41) {
                return f(fix1(__dict_Lazy1_23)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_24) {
        return function (f) {
            return defer(__dict_Lazy_24)(function (_40) {
                return f(fix(__dict_Lazy_24)(f));
            });
        };
    };
    return {
        Lazy2: Lazy2, 
        Lazy1: Lazy1, 
        Lazy: Lazy, 
        fix2: fix2, 
        fix1: fix1, 
        fix: fix, 
        defer2: defer2, 
        defer1: defer1, 
        defer: defer
    };
})();
var PS = PS || {};
PS.Control_Functor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$dollar = function (__dict_Functor_25) {
        return function (x) {
            return function (f) {
                return Prelude["<$>"](__dict_Functor_25)(Prelude["const"](x))(f);
            };
        };
    };
    var $dollar$greater = function (__dict_Functor_26) {
        return function (f) {
            return function (x) {
                return Prelude["<$>"](__dict_Functor_26)(Prelude["const"](x))(f);
            };
        };
    };
    return {
        "$>": $dollar$greater, 
        "<$": $less$dollar
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_27) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_27)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_28) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_28)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_29) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_29)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_30) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_30)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_31) {
        return function (w) {
            return $less$less$eq(__dict_Extend_31)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        Extend: Extend, 
        duplicate: duplicate, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        "<<=": $less$less$eq, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_32) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_32)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_33) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_33)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_34) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_34)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_35) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_35)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_36) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_36)(cond)(function (cond$prime) {
                        if (cond$prime) {
                            return t;
                        };
                        if (!cond$prime) {
                            return f;
                        };
                        throw new Error("Failed pattern match");
                    });
                };
            };
        };
    };
    return {
        ifM: ifM, 
        join: join, 
        "<=<": $less$eq$less, 
        ">=>": $greater$eq$greater, 
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_37) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_38) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_40) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_40)(Prelude["<*>"](__dict_Apply_40)(Prelude["<*>"](__dict_Apply_40)(Prelude["<$>"](__dict_Apply_40["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_41) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_41)(Prelude["<*>"](__dict_Apply_41)(Prelude["<$>"](__dict_Apply_41["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_42) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_42)(Prelude["<$>"](__dict_Apply_42["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_43) {
        return function (a) {
            return $times$greater(__dict_Apply_43)(a)(forever(__dict_Apply_43)(a));
        };
    };
    return {
        forever: forever, 
        lift5: lift5, 
        lift4: lift4, 
        lift3: lift3, 
        lift2: lift2, 
        "*>": $times$greater, 
        "<*": $less$times
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_44) {
        return function (__dict_Lazy1_45) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_44["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_44["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_45)(function (_43) {
                    return many(__dict_Alternative_44)(__dict_Lazy1_45)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_46) {
        return function (__dict_Lazy1_47) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_46["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_46)(__dict_Lazy1_47)(v))(Prelude.pure(__dict_Alternative_46["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_48) {
        return function (_44) {
            if (_44) {
                return Prelude["return"](__dict_MonadPlus_48["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_44) {
                return Control_Plus.empty((__dict_MonadPlus_48["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var showMaybe = function (__dict_Show_49) {
        return new Prelude.Show(function (_60) {
            if (_60 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_49)(_60.value0) + ")");
            };
            if (_60 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_50) {
        return new Prelude.Semigroup(function (_58) {
            return function (_59) {
                if (_58 instanceof Nothing) {
                    return _59;
                };
                if (_59 instanceof Nothing) {
                    return _58;
                };
                if (_58 instanceof Just && _59 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_50)(_58.value0)(_59.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_45) {
        return function (_46) {
            return function (_47) {
                if (_47 instanceof Nothing) {
                    return _45;
                };
                if (_47 instanceof Just) {
                    return _46(_47.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (_48) {
        return function (_49) {
            if (_49 instanceof Just) {
                return new Just(_48(_49.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (_56) {
        return function (_57) {
            if (_57 instanceof Nothing) {
                return Nothing.value;
            };
            return Just.create(_56(_57));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_52) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_52))(a)(b);
            };
        }, function (_61) {
            return function (_62) {
                if (_61 instanceof Nothing && _62 instanceof Nothing) {
                    return true;
                };
                if (_61 instanceof Just && _62 instanceof Just) {
                    return Prelude["=="](__dict_Eq_52)(_61.value0)(_62.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_51) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_51["__superclass_Prelude.Eq_0"]());
        }, function (_63) {
            return function (_64) {
                if (_63 instanceof Just && _64 instanceof Just) {
                    return Prelude.compare(__dict_Ord_51)(_63.value0)(_64.value0);
                };
                if (_63 instanceof Nothing && _64 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_63 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_64 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_50) {
        return function (_51) {
            if (_50 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_50.value0)(_51);
            };
            if (_50 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_54) {
        return function (_55) {
            if (_54 instanceof Just) {
                return _55(_54.value0);
            };
            if (_54 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_52) {
        return function (_53) {
            if (_52 instanceof Nothing) {
                return _53;
            };
            return _52;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        altMaybe: altMaybe, 
        plusMaybe: plusMaybe, 
        alternativeMaybe: alternativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        extendMaybe: extendMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe, 
        eqMaybe: eqMaybe, 
        ordMaybe: ordMaybe
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_65) {
        if (_65 instanceof Data_Maybe.Just) {
            return _65.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Thermite_Types = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Spec = function (x) {
        return x;
    };
    return {
        Spec: Spec
    };
})();
var PS = PS || {};
PS.Thermite_Internal = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Thermite_Types = PS.Thermite_Types;
    
  function getStateImpl(ctx) {
    return function() {
      return ctx.state;
    };
  }
  ;
    
  function setStateImpl(ctx) {
    return function(state) {
      return function() {
        ctx.setState(state);
      };
    };
  }
  ;
    
  function textImpl(s) {
    return s;
  }
  ;
    
  function createElementImpl(name) {
    return function(ps) {
      return function(children) {
        var props = {};

        for (var i = 0; i < ps.length; i++) {
          var p = ps[i];
          props[p[0]] = p[1];
        }

        return React.createElement(name, props, children);
      };
    };
  }
  ;
    
  function unsafeAttribute(attr) {
    return function(value) {
      return [attr, value];
    };
  }
  ;
    
  function event(name) {
    return function(context) {
      return function(f) {
        return [name, function(e) {
          context.performAction(f(e));
        }];
      };
    };
  }
  ;
    
  function createClassImpl(runAction) {
    return function(maybe) {
      return function(spec) {
        return React.createClass({
          getInitialState: function() {
            return spec.initialState;
          },
          performAction: function(action) {
            runAction(this)(spec.performAction(this)(action))();
          },
          render: function() {
            return spec.render(this)(this.state)(this.props);
          },
          componentWillMount: function() {
            var self = this;
            maybe(function() { })(function(action) {
              return function() {
                self.performAction(action);
              };
            })(spec.componentWillMount)();
          },
          displayName: maybe(undefined)(function(a) { return a; })(spec.displayName)
        })
      };
    };
  }
  ;
    
  function renderImpl(component) {
    return function(props) {
      return function() {
        React.render(React.createElement(component, props), document.body);
      };
    };
  }
  ;
    return {
        renderImpl: renderImpl, 
        createClassImpl: createClassImpl, 
        event: event, 
        unsafeAttribute: unsafeAttribute, 
        createElementImpl: createElementImpl, 
        textImpl: textImpl, 
        setStateImpl: setStateImpl, 
        getStateImpl: getStateImpl
    };
})();
var PS = PS || {};
PS.Thermite_Action = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Thermite_Internal = PS.Thermite_Internal;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Thermite_Types = PS.Thermite_Types;
    var GetState = (function () {
        function GetState(value0) {
            this.value0 = value0;
        };
        GetState.create = function (value0) {
            return new GetState(value0);
        };
        return GetState;
    })();
    var SetState = (function () {
        function SetState(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        SetState.create = function (value0) {
            return function (value1) {
                return new SetState(value0, value1);
            };
        };
        return SetState;
    })();
    var Wait = (function () {
        function Wait(value0) {
            this.value0 = value0;
        };
        Wait.create = function (value0) {
            return new Wait(value0);
        };
        return Wait;
    })();
    var Pure = (function () {
        function Pure(value0) {
            this.value0 = value0;
        };
        Pure.create = function (value0) {
            return new Pure(value0);
        };
        return Pure;
    })();
    var Impure = (function () {
        function Impure(value0) {
            this.value0 = value0;
        };
        Impure.create = function (value0) {
            return new Impure(value0);
        };
        return Impure;
    })();
    var setState = function (s) {
        return Impure.create(new SetState(s, new Pure(Prelude.unit)));
    };
    var runAction = function (ctx) {
        var go = function (_68) {
            if (_68 instanceof Pure) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
            };
            if (_68 instanceof Impure && _68.value0 instanceof GetState) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                    var _5 = Thermite_Internal.getStateImpl(ctx)();
                    return go(_68.value0.value0(_5))();
                });
            };
            if (_68 instanceof Impure && _68.value0 instanceof SetState) {
                return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                    Thermite_Internal.setStateImpl(ctx)(_68.value0.value0)();
                    return go(_68.value0.value1)();
                });
            };
            if (_68 instanceof Impure && _68.value0 instanceof Wait) {
                return _68.value0.value0(go);
            };
            throw new Error("Failed pattern match");
        };
        return go;
    };
    var getState = Impure.create(new GetState(Pure.create));
    var functorActionF = new Prelude.Functor(function (_66) {
        return function (_67) {
            if (_67 instanceof GetState) {
                return new GetState(Prelude["<<<"](Prelude.semigroupoidArr)(_66)(_67.value0));
            };
            if (_67 instanceof SetState) {
                return new SetState(_67.value0, _66(_67.value1));
            };
            if (_67 instanceof Wait) {
                return new Wait(function (k_1) {
                    return _67.value0(Prelude["<<<"](Prelude.semigroupoidArr)(k_1)(_66));
                });
            };
            throw new Error("Failed pattern match");
        };
    });
    var functorAction = new Prelude.Functor(function (_69) {
        return function (_70) {
            if (_70 instanceof Pure) {
                return new Pure(_69(_70.value0));
            };
            if (_70 instanceof Impure) {
                return new Impure(Prelude["<$>"](functorActionF)(Prelude["<$>"](functorAction)(_69))(_70.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var async = function (c) {
        return Impure.create(new Wait(function (k) {
            return c(Prelude["<<<"](Prelude.semigroupoidArr)(k)(Pure.create));
        }));
    };
    var sync = function (e) {
        return async(Prelude[">>="](Control_Monad_Eff.bindEff)(e));
    };
    var monadAction = new Prelude.Monad(function () {
        return applicativeAction;
    }, function () {
        return bindAction;
    });
    var bindAction = new Prelude.Bind(function (_71) {
        return function (_72) {
            if (_71 instanceof Pure) {
                return _72(_71.value0);
            };
            if (_71 instanceof Impure) {
                return Impure.create(Prelude["<#>"](functorActionF)(_71.value0)(function (a_1) {
                    return Prelude[">>="](bindAction)(a_1)(_72);
                }));
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyAction;
    });
    var applyAction = new Prelude.Apply(Prelude.ap(monadAction), function () {
        return functorAction;
    });
    var applicativeAction = new Prelude.Applicative(function () {
        return applyAction;
    }, Pure.create);
    var asyncSetState = function (c) {
        return Prelude[">>="](bindAction)(async(c))(function (_7) {
            return setState(_7);
        });
    };
    var modifyState = function (f) {
        return Prelude[">>="](bindAction)(getState)(function (_6) {
            return setState(f(_6));
        });
    };
    return {
        asyncSetState: asyncSetState, 
        async: async, 
        sync: sync, 
        modifyState: modifyState, 
        setState: setState, 
        getState: getState, 
        runAction: runAction, 
        functorAction: functorAction, 
        applyAction: applyAction, 
        applicativeAction: applicativeAction, 
        bindAction: bindAction, 
        monadAction: monadAction
    };
})();
var PS = PS || {};
PS.Thermite_Events = (function () {
    "use strict";
    var Thermite_Internal = PS.Thermite_Internal;
    var Prelude = PS.Prelude;
    var Thermite_Types = PS.Thermite_Types;
    var onWheel = Thermite_Internal.event("onWheel");
    var onTouchStart = Thermite_Internal.event("onTouchStart");
    var onTouchMove = Thermite_Internal.event("onTouchMove");
    var onTouchEnd = Thermite_Internal.event("onTouchEnd");
    var onTouchCancel = Thermite_Internal.event("onTouchCancel");
    var onSubmit = Thermite_Internal.event("onSubmit");
    var onScroll = Thermite_Internal.event("onScroll");
    var onPaste = Thermite_Internal.event("onPaste");
    var onMouseUp = Thermite_Internal.event("onMouseUp");
    var onMouseOver = Thermite_Internal.event("onMouseOver");
    var onMouseOut = Thermite_Internal.event("onMouseOut");
    var onMouseMove = Thermite_Internal.event("onMouseMove");
    var onMouseLeave = Thermite_Internal.event("onMouseLeave");
    var onMouseEnter = Thermite_Internal.event("onMouseEnter");
    var onMouseDown = Thermite_Internal.event("onMouseDown");
    var onKeyUp = Thermite_Internal.event("onKeyUp");
    var onKeyPress = Thermite_Internal.event("onKeyPress");
    var onKeyDown = Thermite_Internal.event("onKeyDown");
    var onInput = Thermite_Internal.event("onInput");
    var onFocus = Thermite_Internal.event("onFocus");
    var onDrop = Thermite_Internal.event("onDrop");
    var onDragStart = Thermite_Internal.event("onDragStart");
    var onDragOver = Thermite_Internal.event("onDragOver");
    var onDragLeave = Thermite_Internal.event("onDragLeave");
    var onDragExit = Thermite_Internal.event("onDragExit");
    var onDragEnter = Thermite_Internal.event("onDragEnter");
    var onDragEnd = Thermite_Internal.event("onDragEnd");
    var onDrag = Thermite_Internal.event("onDrag");
    var onDoubleClick = Thermite_Internal.event("onDoubleClick");
    var onCut = Thermite_Internal.event("onCut");
    var onCopy = Thermite_Internal.event("onCopy");
    var onClick = Thermite_Internal.event("onClick");
    var onChange = Thermite_Internal.event("onChange");
    var onBlur = Thermite_Internal.event("onBlur");
    return {
        onWheel: onWheel, 
        onScroll: onScroll, 
        onTouchStart: onTouchStart, 
        onTouchMove: onTouchMove, 
        onTouchEnd: onTouchEnd, 
        onTouchCancel: onTouchCancel, 
        onMouseUp: onMouseUp, 
        onMouseOver: onMouseOver, 
        onMouseOut: onMouseOut, 
        onMouseMove: onMouseMove, 
        onMouseLeave: onMouseLeave, 
        onMouseEnter: onMouseEnter, 
        onMouseDown: onMouseDown, 
        onDrop: onDrop, 
        onDragStart: onDragStart, 
        onDragOver: onDragOver, 
        onDragLeave: onDragLeave, 
        onDragExit: onDragExit, 
        onDragEnter: onDragEnter, 
        onDragEnd: onDragEnd, 
        onDrag: onDrag, 
        onDoubleClick: onDoubleClick, 
        onClick: onClick, 
        onSubmit: onSubmit, 
        onInput: onInput, 
        onChange: onChange, 
        onBlur: onBlur, 
        onFocus: onFocus, 
        onKeyUp: onKeyUp, 
        onKeyPress: onKeyPress, 
        onKeyDown: onKeyDown, 
        onPaste: onPaste, 
        onCut: onCut, 
        onCopy: onCopy
    };
})();
var PS = PS || {};
PS.Thermite_Html = (function () {
    "use strict";
    var Thermite_Internal = PS.Thermite_Internal;
    var Prelude = PS.Prelude;
    var Thermite_Types = PS.Thermite_Types;
    var text = Thermite_Internal.textImpl;
    var createElement = Thermite_Internal.createElementImpl;
    return {
        text: text, 
        createElement: createElement
    };
})();
var PS = PS || {};
PS.Thermite = (function () {
    "use strict";
    var Thermite_Internal = PS.Thermite_Internal;
    var Thermite_Action = PS.Thermite_Action;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude = PS.Prelude;
    var DOM = PS.DOM;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Thermite_Html = PS.Thermite_Html;
    var Thermite_Types = PS.Thermite_Types;
    var simpleSpec = function (initialState) {
        return function (performAction) {
            return function (render_1) {
                return {
                    initialState: initialState, 
                    performAction: performAction, 
                    render: render_1, 
                    componentWillMount: Data_Maybe.Nothing.value, 
                    displayName: Data_Maybe.Nothing.value
                };
            };
        };
    };
    var render = Thermite_Internal.renderImpl;
    var displayName = function (_75) {
        return function (_76) {
            var _192 = {};
            for (var _193 in _76) {
                if (_76.hasOwnProperty(_193)) {
                    _192[_193] = _76[_193];
                };
            };
            _192.displayName = new Data_Maybe.Just(_75);
            return _192;
        };
    };
    var createClass = Thermite_Internal.createClassImpl(Thermite_Action.runAction)(Data_Maybe.maybe);
    var componentWillMount = function (_73) {
        return function (_74) {
            var _196 = {};
            for (var _197 in _74) {
                if (_74.hasOwnProperty(_197)) {
                    _196[_197] = _74[_197];
                };
            };
            _196.componentWillMount = new Data_Maybe.Just(_73);
            return _196;
        };
    };
    return {
        render: render, 
        displayName: displayName, 
        createClass: createClass, 
        componentWillMount: componentWillMount, 
        simpleSpec: simpleSpec
    };
})();
var PS = PS || {};
PS.Thermite_Html_Attributes = (function () {
    "use strict";
    var Thermite_Internal = PS.Thermite_Internal;
    var Prelude = PS.Prelude;
    var Thermite_Types = PS.Thermite_Types;
    var wmode = Thermite_Internal.unsafeAttribute("wmode");
    var width = Thermite_Internal.unsafeAttribute("width");
    var value = Thermite_Internal.unsafeAttribute("value");
    var useMap = Thermite_Internal.unsafeAttribute("useMap");
    var title = Thermite_Internal.unsafeAttribute("title");
    var target = Thermite_Internal.unsafeAttribute("target");
    var tabIndex = Thermite_Internal.unsafeAttribute("tabIndex");
    var step = Thermite_Internal.unsafeAttribute("step");
    var start = Thermite_Internal.unsafeAttribute("start");
    var srcSet = Thermite_Internal.unsafeAttribute("srcSet");
    var srcDoc = Thermite_Internal.unsafeAttribute("srcDoc");
    var src = Thermite_Internal.unsafeAttribute("src");
    var spellCheck = Thermite_Internal.unsafeAttribute("spellCheck");
    var span = Thermite_Internal.unsafeAttribute("span");
    var sizes = Thermite_Internal.unsafeAttribute("sizes");
    var size = Thermite_Internal.unsafeAttribute("size");
    var shape = Thermite_Internal.unsafeAttribute("shape");
    var selected = Thermite_Internal.unsafeAttribute("selected");
    var seamless = Thermite_Internal.unsafeAttribute("seamless");
    var scrolling = Thermite_Internal.unsafeAttribute("scrolling");
    var scope = Thermite_Internal.unsafeAttribute("scope");
    var sandbox = Thermite_Internal.unsafeAttribute("sandbox");
    var rows = Thermite_Internal.unsafeAttribute("rows");
    var rowSpan = Thermite_Internal.unsafeAttribute("rowSpan");
    var role = Thermite_Internal.unsafeAttribute("role");
    var required = Thermite_Internal.unsafeAttribute("required");
    var rel = Thermite_Internal.unsafeAttribute("rel");
    var readOnly = Thermite_Internal.unsafeAttribute("readOnly");
    var radioGroup = Thermite_Internal.unsafeAttribute("radioGroup");
    var preload = Thermite_Internal.unsafeAttribute("preload");
    var poster = Thermite_Internal.unsafeAttribute("poster");
    var placeholder = Thermite_Internal.unsafeAttribute("placeholder");
    var pattern = Thermite_Internal.unsafeAttribute("pattern");
    var open = Thermite_Internal.unsafeAttribute("open");
    var noValidate = Thermite_Internal.unsafeAttribute("noValidate");
    var name = Thermite_Internal.unsafeAttribute("name");
    var muted = Thermite_Internal.unsafeAttribute("muted");
    var multiple = Thermite_Internal.unsafeAttribute("multiple");
    var min = Thermite_Internal.unsafeAttribute("min");
    var method = Thermite_Internal.unsafeAttribute("method");
    var mediaGroup = Thermite_Internal.unsafeAttribute("mediaGroup");
    var media = Thermite_Internal.unsafeAttribute("media");
    var maxLength = Thermite_Internal.unsafeAttribute("maxLength");
    var max = Thermite_Internal.unsafeAttribute("max");
    var marginWidth = Thermite_Internal.unsafeAttribute("marginWidth");
    var marginHeight = Thermite_Internal.unsafeAttribute("marginHeight");
    var manifest = Thermite_Internal.unsafeAttribute("manifest");
    var loop = Thermite_Internal.unsafeAttribute("loop");
    var list = Thermite_Internal.unsafeAttribute("list");
    var lang = Thermite_Internal.unsafeAttribute("lang");
    var label = Thermite_Internal.unsafeAttribute("label");
    var icon = Thermite_Internal.unsafeAttribute("icon");
    var httpEquiv = Thermite_Internal.unsafeAttribute("httpEquiv");
    var htmlFor = Thermite_Internal.unsafeAttribute("htmlFor");
    var hrefLang = Thermite_Internal.unsafeAttribute("hrefLang");
    var href = Thermite_Internal.unsafeAttribute("href");
    var hidden = Thermite_Internal.unsafeAttribute("hidden");
    var height = Thermite_Internal.unsafeAttribute("height");
    var frameBorder = Thermite_Internal.unsafeAttribute("frameBorder");
    var formTarget = Thermite_Internal.unsafeAttribute("formTarget");
    var formNoValidate = Thermite_Internal.unsafeAttribute("formNoValidate");
    var formMethod = Thermite_Internal.unsafeAttribute("formMethod");
    var formEncType = Thermite_Internal.unsafeAttribute("formEncType");
    var formAction = Thermite_Internal.unsafeAttribute("formAction");
    var form = Thermite_Internal.unsafeAttribute("form");
    var encType = Thermite_Internal.unsafeAttribute("encType");
    var draggable = Thermite_Internal.unsafeAttribute("draggable");
    var download = Thermite_Internal.unsafeAttribute("download");
    var disabled = Thermite_Internal.unsafeAttribute("disabled");
    var dir = Thermite_Internal.unsafeAttribute("dir");
    var defer = Thermite_Internal.unsafeAttribute("defer");
    var dateTime = Thermite_Internal.unsafeAttribute("dateTime");
    var crossOrigin = Thermite_Internal.unsafeAttribute("crossOrigin");
    var coords = Thermite_Internal.unsafeAttribute("coords");
    var controls = Thermite_Internal.unsafeAttribute("controls");
    var contextMenu = Thermite_Internal.unsafeAttribute("contextMenu");
    var contentEditable = Thermite_Internal.unsafeAttribute("contentEditable");
    var content = Thermite_Internal.unsafeAttribute("content");
    var cols = Thermite_Internal.unsafeAttribute("cols");
    var colSpan = Thermite_Internal.unsafeAttribute("colSpan");
    var className = Thermite_Internal.unsafeAttribute("className");
    var classID = Thermite_Internal.unsafeAttribute("classID");
    var checked = Thermite_Internal.unsafeAttribute("checked");
    var charSet = Thermite_Internal.unsafeAttribute("charSet");
    var cellSpacing = Thermite_Internal.unsafeAttribute("cellSpacing");
    var cellPadding = Thermite_Internal.unsafeAttribute("cellPadding");
    var autoPlay = Thermite_Internal.unsafeAttribute("autoPlay");
    var autoFocus = Thermite_Internal.unsafeAttribute("autoFocus");
    var autoComplete = Thermite_Internal.unsafeAttribute("autoComplete");
    var async = Thermite_Internal.unsafeAttribute("async");
    var alt = Thermite_Internal.unsafeAttribute("alt");
    var allowTransparency = Thermite_Internal.unsafeAttribute("allowTransparency");
    var allowFullScreen = Thermite_Internal.unsafeAttribute("allowFullScreen");
    var action = Thermite_Internal.unsafeAttribute("action");
    var accessKey = Thermite_Internal.unsafeAttribute("accessKey");
    var acceptCharset = Thermite_Internal.unsafeAttribute("acceptCharset");
    var accept = Thermite_Internal.unsafeAttribute("accept");
    var _type = Thermite_Internal.unsafeAttribute("type");
    var _id = Thermite_Internal.unsafeAttribute("id");
    return {
        wmode: wmode, 
        width: width, 
        value: value, 
        useMap: useMap, 
        _type: _type, 
        title: title, 
        target: target, 
        tabIndex: tabIndex, 
        step: step, 
        start: start, 
        srcSet: srcSet, 
        srcDoc: srcDoc, 
        src: src, 
        spellCheck: spellCheck, 
        span: span, 
        sizes: sizes, 
        size: size, 
        shape: shape, 
        selected: selected, 
        seamless: seamless, 
        scrolling: scrolling, 
        scope: scope, 
        sandbox: sandbox, 
        rowSpan: rowSpan, 
        rows: rows, 
        role: role, 
        required: required, 
        rel: rel, 
        readOnly: readOnly, 
        radioGroup: radioGroup, 
        preload: preload, 
        poster: poster, 
        placeholder: placeholder, 
        pattern: pattern, 
        open: open, 
        noValidate: noValidate, 
        name: name, 
        muted: muted, 
        multiple: multiple, 
        min: min, 
        method: method, 
        mediaGroup: mediaGroup, 
        media: media, 
        maxLength: maxLength, 
        max: max, 
        marginWidth: marginWidth, 
        marginHeight: marginHeight, 
        manifest: manifest, 
        loop: loop, 
        list: list, 
        lang: lang, 
        label: label, 
        _id: _id, 
        icon: icon, 
        httpEquiv: httpEquiv, 
        htmlFor: htmlFor, 
        hrefLang: hrefLang, 
        href: href, 
        hidden: hidden, 
        height: height, 
        frameBorder: frameBorder, 
        formTarget: formTarget, 
        formNoValidate: formNoValidate, 
        formMethod: formMethod, 
        formEncType: formEncType, 
        formAction: formAction, 
        form: form, 
        encType: encType, 
        draggable: draggable, 
        download: download, 
        disabled: disabled, 
        dir: dir, 
        defer: defer, 
        dateTime: dateTime, 
        crossOrigin: crossOrigin, 
        coords: coords, 
        controls: controls, 
        contextMenu: contextMenu, 
        contentEditable: contentEditable, 
        content: content, 
        colSpan: colSpan, 
        cols: cols, 
        className: className, 
        classID: classID, 
        checked: checked, 
        charSet: charSet, 
        cellSpacing: cellSpacing, 
        cellPadding: cellPadding, 
        autoPlay: autoPlay, 
        autoFocus: autoFocus, 
        autoComplete: autoComplete, 
        async: async, 
        alt: alt, 
        allowTransparency: allowTransparency, 
        allowFullScreen: allowFullScreen, 
        action: action, 
        accessKey: accessKey, 
        acceptCharset: acceptCharset, 
        accept: accept
    };
})();
var PS = PS || {};
PS.Thermite_Html_Elements = (function () {
    "use strict";
    var Thermite_Internal = PS.Thermite_Internal;
    var Prelude = PS.Prelude;
    var Thermite_Types = PS.Thermite_Types;
    var wbr = Thermite_Internal.createElementImpl("body");
    var wbr$prime = wbr([  ]);
    var video = Thermite_Internal.createElementImpl("video");
    var video$prime = video([  ]);
    var $$var = Thermite_Internal.createElementImpl("var");
    var var$prime = $$var([  ]);
    var ul = Thermite_Internal.createElementImpl("ul");
    var ul$prime = ul([  ]);
    var u = Thermite_Internal.createElementImpl("u");
    var u$prime = u([  ]);
    var track = Thermite_Internal.createElementImpl("track");
    var track$prime = track([  ]);
    var tr = Thermite_Internal.createElementImpl("tr");
    var tr$prime = tr([  ]);
    var title = Thermite_Internal.createElementImpl("title");
    var title$prime = title([  ]);
    var time = Thermite_Internal.createElementImpl("time");
    var time$prime = time([  ]);
    var thead = Thermite_Internal.createElementImpl("thead");
    var thead$prime = thead([  ]);
    var th = Thermite_Internal.createElementImpl("th");
    var th$prime = th([  ]);
    var tfoot = Thermite_Internal.createElementImpl("tfoot");
    var tfoot$prime = tfoot([  ]);
    var textarea = Thermite_Internal.createElementImpl("textarea");
    var textarea$prime = textarea([  ]);
    var td = Thermite_Internal.createElementImpl("td");
    var td$prime = td([  ]);
    var tbody = Thermite_Internal.createElementImpl("tbody");
    var tbody$prime = tbody([  ]);
    var table = Thermite_Internal.createElementImpl("table");
    var table$prime = table([  ]);
    var sup = Thermite_Internal.createElementImpl("sup");
    var sup$prime = sup([  ]);
    var summary = Thermite_Internal.createElementImpl("summary");
    var summary$prime = summary([  ]);
    var sub = Thermite_Internal.createElementImpl("sub");
    var sub$prime = sub([  ]);
    var style = Thermite_Internal.createElementImpl("style");
    var style$prime = style([  ]);
    var strong = Thermite_Internal.createElementImpl("strong");
    var strong$prime = strong([  ]);
    var span = Thermite_Internal.createElementImpl("span");
    var span$prime = span([  ]);
    var source = Thermite_Internal.createElementImpl("source");
    var source$prime = source([  ]);
    var small = Thermite_Internal.createElementImpl("small");
    var small$prime = small([  ]);
    var select = Thermite_Internal.createElementImpl("select");
    var select$prime = select([  ]);
    var section = Thermite_Internal.createElementImpl("section");
    var section$prime = section([  ]);
    var script = Thermite_Internal.createElementImpl("script");
    var script$prime = script([  ]);
    var samp = Thermite_Internal.createElementImpl("samp");
    var samp$prime = samp([  ]);
    var s = Thermite_Internal.createElementImpl("s");
    var s$prime = s([  ]);
    var ruby = Thermite_Internal.createElementImpl("ruby");
    var ruby$prime = ruby([  ]);
    var rt = Thermite_Internal.createElementImpl("rt");
    var rt$prime = rt([  ]);
    var rp = Thermite_Internal.createElementImpl("rp");
    var rp$prime = rp([  ]);
    var q = Thermite_Internal.createElementImpl("q");
    var q$prime = q([  ]);
    var progress = Thermite_Internal.createElementImpl("progress");
    var progress$prime = progress([  ]);
    var pre = Thermite_Internal.createElementImpl("pre");
    var pre$prime = pre([  ]);
    var picture = Thermite_Internal.createElementImpl("picture");
    var picture$prime = picture([  ]);
    var param = Thermite_Internal.createElementImpl("param");
    var param$prime = param([  ]);
    var p = Thermite_Internal.createElementImpl("p");
    var p$prime = p([  ]);
    var output = Thermite_Internal.createElementImpl("output");
    var output$prime = output([  ]);
    var option = Thermite_Internal.createElementImpl("option");
    var option$prime = option([  ]);
    var optgroup = Thermite_Internal.createElementImpl("optgroup");
    var optgroup$prime = optgroup([  ]);
    var ol = Thermite_Internal.createElementImpl("ol");
    var ol$prime = ol([  ]);
    var object = Thermite_Internal.createElementImpl("object");
    var object$prime = object([  ]);
    var noscript = Thermite_Internal.createElementImpl("noscript");
    var noscript$prime = noscript([  ]);
    var nav = Thermite_Internal.createElementImpl("nav");
    var nav$prime = nav([  ]);
    var meter = Thermite_Internal.createElementImpl("meter");
    var meter$prime = meter([  ]);
    var meta = Thermite_Internal.createElementImpl("meta");
    var meta$prime = meta([  ]);
    var menuitem = Thermite_Internal.createElementImpl("menuitem");
    var menuitem$prime = menuitem([  ]);
    var menu = Thermite_Internal.createElementImpl("menu");
    var menu$prime = menu([  ]);
    var mark = Thermite_Internal.createElementImpl("mark");
    var mark$prime = mark([  ]);
    var map = Thermite_Internal.createElementImpl("map");
    var map$prime = map([  ]);
    var main = Thermite_Internal.createElementImpl("main");
    var main$prime = main([  ]);
    var link = Thermite_Internal.createElementImpl("link");
    var li = Thermite_Internal.createElementImpl("li");
    var li$prime = li([  ]);
    var legend = Thermite_Internal.createElementImpl("legend");
    var legend$prime = legend([  ]);
    var label = Thermite_Internal.createElementImpl("label");
    var label$prime = label([  ]);
    var keygen = Thermite_Internal.createElementImpl("keygen");
    var keygen$prime = keygen([  ]);
    var kbd = Thermite_Internal.createElementImpl("kbd");
    var kbd$prime = kbd([  ]);
    var ins = Thermite_Internal.createElementImpl("ins");
    var ins$prime = ins([  ]);
    var input = Thermite_Internal.createElementImpl("input");
    var input$prime = input([  ]);
    var img = Thermite_Internal.createElementImpl("img");
    var img$prime = img([  ]);
    var iframe = Thermite_Internal.createElementImpl("iframe");
    var iframe$prime = iframe([  ]);
    var i = Thermite_Internal.createElementImpl("i");
    var i$prime = i([  ]);
    var html = Thermite_Internal.createElementImpl("html");
    var html$prime = html([  ]);
    var hr = Thermite_Internal.createElementImpl("hr");
    var hr$prime = hr([  ]);
    var header = Thermite_Internal.createElementImpl("header");
    var header$prime = header([  ]);
    var head = Thermite_Internal.createElementImpl("head");
    var head$prime = head([  ]);
    var h6 = Thermite_Internal.createElementImpl("h6");
    var h6$prime = h6([  ]);
    var h5 = Thermite_Internal.createElementImpl("h5");
    var h5$prime = h5([  ]);
    var h4 = Thermite_Internal.createElementImpl("h4");
    var h4$prime = h4([  ]);
    var h3 = Thermite_Internal.createElementImpl("h3");
    var h3$prime = h3([  ]);
    var h2 = Thermite_Internal.createElementImpl("h2");
    var h2$prime = h2([  ]);
    var h1 = Thermite_Internal.createElementImpl("h1");
    var h1$prime = h1([  ]);
    var form = Thermite_Internal.createElementImpl("form");
    var form$prime = form([  ]);
    var footer = Thermite_Internal.createElementImpl("footer");
    var footer$prime = footer([  ]);
    var figure = Thermite_Internal.createElementImpl("figure");
    var figure$prime = figure([  ]);
    var figcaption = Thermite_Internal.createElementImpl("figcaption");
    var figcaption$prime = figcaption([  ]);
    var fieldset = Thermite_Internal.createElementImpl("fieldset");
    var fieldset$prime = fieldset([  ]);
    var embed = Thermite_Internal.createElementImpl("embed");
    var embed$prime = embed([  ]);
    var em = Thermite_Internal.createElementImpl("em");
    var em$prime = em([  ]);
    var dt = Thermite_Internal.createElementImpl("dt");
    var dt$prime = dt([  ]);
    var dl = Thermite_Internal.createElementImpl("dl");
    var dl$prime = dl([  ]);
    var div = Thermite_Internal.createElementImpl("div");
    var div$prime = div([  ]);
    var dialog = Thermite_Internal.createElementImpl("dialog");
    var dialog$prime = dialog([  ]);
    var dfn = Thermite_Internal.createElementImpl("dfn");
    var dfn$prime = dfn([  ]);
    var details = Thermite_Internal.createElementImpl("details");
    var details$prime = details([  ]);
    var del = Thermite_Internal.createElementImpl("del");
    var del$prime = del([  ]);
    var dd = Thermite_Internal.createElementImpl("dd");
    var dd$prime = dd([  ]);
    var datalist = Thermite_Internal.createElementImpl("datalist");
    var datalist$prime = datalist([  ]);
    var colgroup = Thermite_Internal.createElementImpl("colgroup");
    var colgroup$prime = colgroup([  ]);
    var col = Thermite_Internal.createElementImpl("col");
    var col$prime = col([  ]);
    var code = Thermite_Internal.createElementImpl("code");
    var code$prime = code([  ]);
    var cite = Thermite_Internal.createElementImpl("cite");
    var cite$prime = cite([  ]);
    var caption = Thermite_Internal.createElementImpl("caption");
    var caption$prime = caption([  ]);
    var canvas = Thermite_Internal.createElementImpl("canvas");
    var canvas$prime = canvas([  ]);
    var button = Thermite_Internal.createElementImpl("button");
    var button$prime = button([  ]);
    var br = Thermite_Internal.createElementImpl("br");
    var br$prime = br([  ]);
    var body = Thermite_Internal.createElementImpl("body");
    var body$prime = body([  ]);
    var link$prime = body([  ]);
    var blockquote = Thermite_Internal.createElementImpl("blockquote");
    var blockquote$prime = blockquote([  ]);
    var big = Thermite_Internal.createElementImpl("big");
    var big$prime = big([  ]);
    var bdo = Thermite_Internal.createElementImpl("bdo");
    var bdo$prime = bdo([  ]);
    var bdi = Thermite_Internal.createElementImpl("bdi");
    var bdi$prime = bdi([  ]);
    var base = Thermite_Internal.createElementImpl("base");
    var base$prime = base([  ]);
    var b = Thermite_Internal.createElementImpl("b");
    var b$prime = b([  ]);
    var audio = Thermite_Internal.createElementImpl("audio");
    var audio$prime = audio([  ]);
    var aside = Thermite_Internal.createElementImpl("aside");
    var aside$prime = aside([  ]);
    var article = Thermite_Internal.createElementImpl("article");
    var article$prime = article([  ]);
    var area = Thermite_Internal.createElementImpl("area");
    var area$prime = area([  ]);
    var address = Thermite_Internal.createElementImpl("address");
    var address$prime = address([  ]);
    var abbr = Thermite_Internal.createElementImpl("abbr");
    var abbr$prime = abbr([  ]);
    var a = Thermite_Internal.createElementImpl("a");
    var a$prime = a([  ]);
    var _data = Thermite_Internal.createElementImpl("data");
    var _data$prime = _data([  ]);
    return {
        "wbr'": wbr$prime, 
        wbr: wbr, 
        "video'": video$prime, 
        video: video, 
        "var'": var$prime, 
        "var": $$var, 
        "ul'": ul$prime, 
        ul: ul, 
        "u'": u$prime, 
        u: u, 
        "track'": track$prime, 
        track: track, 
        "tr'": tr$prime, 
        tr: tr, 
        "title'": title$prime, 
        title: title, 
        "time'": time$prime, 
        time: time, 
        "thead'": thead$prime, 
        thead: thead, 
        "th'": th$prime, 
        th: th, 
        "tfoot'": tfoot$prime, 
        tfoot: tfoot, 
        "textarea'": textarea$prime, 
        textarea: textarea, 
        "td'": td$prime, 
        td: td, 
        "tbody'": tbody$prime, 
        tbody: tbody, 
        "table'": table$prime, 
        table: table, 
        "sup'": sup$prime, 
        sup: sup, 
        "summary'": summary$prime, 
        summary: summary, 
        "sub'": sub$prime, 
        sub: sub, 
        "style'": style$prime, 
        style: style, 
        "strong'": strong$prime, 
        strong: strong, 
        "span'": span$prime, 
        span: span, 
        "source'": source$prime, 
        source: source, 
        "small'": small$prime, 
        small: small, 
        "select'": select$prime, 
        select: select, 
        "section'": section$prime, 
        section: section, 
        "script'": script$prime, 
        script: script, 
        "samp'": samp$prime, 
        samp: samp, 
        "s'": s$prime, 
        s: s, 
        "ruby'": ruby$prime, 
        ruby: ruby, 
        "rt'": rt$prime, 
        rt: rt, 
        "rp'": rp$prime, 
        rp: rp, 
        "q'": q$prime, 
        q: q, 
        "progress'": progress$prime, 
        progress: progress, 
        "pre'": pre$prime, 
        pre: pre, 
        "picture'": picture$prime, 
        picture: picture, 
        "param'": param$prime, 
        param: param, 
        "p'": p$prime, 
        p: p, 
        "output'": output$prime, 
        output: output, 
        "option'": option$prime, 
        option: option, 
        "optgroup'": optgroup$prime, 
        optgroup: optgroup, 
        "ol'": ol$prime, 
        ol: ol, 
        "object'": object$prime, 
        object: object, 
        "noscript'": noscript$prime, 
        noscript: noscript, 
        "nav'": nav$prime, 
        nav: nav, 
        "meter'": meter$prime, 
        meter: meter, 
        "meta'": meta$prime, 
        meta: meta, 
        "menuitem'": menuitem$prime, 
        menuitem: menuitem, 
        "menu'": menu$prime, 
        menu: menu, 
        "mark'": mark$prime, 
        mark: mark, 
        "map'": map$prime, 
        map: map, 
        "main'": main$prime, 
        main: main, 
        "link'": link$prime, 
        link: link, 
        "li'": li$prime, 
        li: li, 
        "legend'": legend$prime, 
        legend: legend, 
        "label'": label$prime, 
        label: label, 
        "keygen'": keygen$prime, 
        keygen: keygen, 
        "kbd'": kbd$prime, 
        kbd: kbd, 
        "ins'": ins$prime, 
        ins: ins, 
        "input'": input$prime, 
        input: input, 
        "img'": img$prime, 
        img: img, 
        "iframe'": iframe$prime, 
        iframe: iframe, 
        "i'": i$prime, 
        i: i, 
        "html'": html$prime, 
        html: html, 
        "hr'": hr$prime, 
        hr: hr, 
        "header'": header$prime, 
        header: header, 
        "head'": head$prime, 
        head: head, 
        "h6'": h6$prime, 
        h6: h6, 
        "h5'": h5$prime, 
        h5: h5, 
        "h4'": h4$prime, 
        h4: h4, 
        "h3'": h3$prime, 
        h3: h3, 
        "h2'": h2$prime, 
        h2: h2, 
        "h1'": h1$prime, 
        h1: h1, 
        "form'": form$prime, 
        form: form, 
        "footer'": footer$prime, 
        footer: footer, 
        "figure'": figure$prime, 
        figure: figure, 
        "figcaption'": figcaption$prime, 
        figcaption: figcaption, 
        "fieldset'": fieldset$prime, 
        fieldset: fieldset, 
        "embed'": embed$prime, 
        embed: embed, 
        "em'": em$prime, 
        em: em, 
        "dt'": dt$prime, 
        dt: dt, 
        "dl'": dl$prime, 
        dl: dl, 
        "div'": div$prime, 
        div: div, 
        "dialog'": dialog$prime, 
        dialog: dialog, 
        "dfn'": dfn$prime, 
        dfn: dfn, 
        "details'": details$prime, 
        details: details, 
        "del'": del$prime, 
        del: del, 
        "dd'": dd$prime, 
        dd: dd, 
        "datalist'": datalist$prime, 
        datalist: datalist, 
        "_data'": _data$prime, 
        _data: _data, 
        "colgroup'": colgroup$prime, 
        colgroup: colgroup, 
        "col'": col$prime, 
        col: col, 
        "code'": code$prime, 
        code: code, 
        "cite'": cite$prime, 
        cite: cite, 
        "caption'": caption$prime, 
        caption: caption, 
        "canvas'": canvas$prime, 
        canvas: canvas, 
        "button'": button$prime, 
        button: button, 
        "br'": br$prime, 
        br: br, 
        "body'": body$prime, 
        body: body, 
        "blockquote'": blockquote$prime, 
        blockquote: blockquote, 
        "big'": big$prime, 
        big: big, 
        "bdo'": bdo$prime, 
        bdo: bdo, 
        "bdi'": bdi$prime, 
        bdi: bdi, 
        "base'": base$prime, 
        base: base, 
        "b'": b$prime, 
        b: b, 
        "audio'": audio$prime, 
        audio: audio, 
        "aside'": aside$prime, 
        aside: aside, 
        "article'": article$prime, 
        article: article, 
        "area'": area$prime, 
        area: area, 
        "address'": address$prime, 
        address: address, 
        "abbr'": abbr$prime, 
        abbr: abbr, 
        "a'": a$prime, 
        a: a
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Debug_Trace = PS.Debug_Trace;
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Thermite = PS.Thermite;
    var Thermite_Html = PS.Thermite_Html;
    var Thermite_Html_Elements = PS.Thermite_Html_Elements;
    var Thermite_Html_Attributes = PS.Thermite_Html_Attributes;
    var Thermite_Action = PS.Thermite_Action;
    var Thermite_Events = PS.Thermite_Events;
    var Thermite_Types = PS.Thermite_Types;
    var main = Debug_Trace.trace("Look out!");
    return {
        main: main
    };
})();
PS.Main.main();

